<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classalbero_1_1const__iterator" xml:lang="en-US">
<title>albero&lt; T, Comparator &gt;::const_iterator Class Reference</title>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary></indexterm>
<para>

<para>Read only iterator for the albero object. </para>
 
</para>
<para>
<computeroutput>#include &lt;albero.h&gt;</computeroutput>
</para>
Collaboration diagram for albero&lt; T, Comparator &gt;::const_iterator:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classalbero_1_1const__iterator__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef std::forward_iterator_tag <link linkend="_classalbero_1_1const__iterator_1a1c8a92a22c10d88bf18b798a247579f1">iterator_category</link></para>
</listitem>
            <listitem><para>typedef ptrdiff_t <link linkend="_classalbero_1_1const__iterator_1af751fa567b4c5f205789046bd5ce6bd2">difference_type</link></para>
</listitem>
            <listitem><para>typedef const T * <link linkend="_classalbero_1_1const__iterator_1a5b44d31a909319be3bb4638831c22143">pointer</link></para>
</listitem>
            <listitem><para>typedef const T &amp; <link linkend="_classalbero_1_1const__iterator_1ae363ca6861b7424a5a9200f4e8d1406b">reference</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classalbero_1_1const__iterator_1affbde34121570516f295d43ce4b5fbda">const_iterator</link> ()</para>

<para>Construct a new const NULL iterator object. </para>
</listitem>
            <listitem><para><link linkend="_classalbero_1_1const__iterator_1a8cafa0e559d65444f1986cf088135ef3">const_iterator</link> (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; <link linkend="_classalbero_1_1const__iterator_1ab7f43c8e44e5afc42518b39cf2128cbb">operator=</link> (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_classalbero_1_1const__iterator_1a04873946aecfaaa57c206ee9a92e10db">~const_iterator</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classalbero_1a472cbd49994891952384d4cc1a8e7c19">value_type</link> <link linkend="_classalbero_1_1const__iterator_1acf95f24ee2dcc80a8bb9676de5c0dfa6">operator*</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classalbero_1a472cbd49994891952384d4cc1a8e7c19">value_type</link> * <link linkend="_classalbero_1_1const__iterator_1af6333b3d0d2033e21e871bc8f8b00932">operator-&gt;</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; <link linkend="_classalbero_1_1const__iterator_1af43d62370b5a9c97e5a799c7f63f686e">operator++</link> (int)</para>
</listitem>
            <listitem><para><link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; <link linkend="_classalbero_1_1const__iterator_1af8c76ea3ae936f655433d633bfa23059">operator++</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classalbero_1_1const__iterator_1a46e8abb6678200d218ba3f2de2b654c5">operator==</link> (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp;other) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classalbero_1_1const__iterator_1a6c6f45aa23158c2492734374fc8f5040">operator!=</link> (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp;other) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classalbero_1_1const__iterator_1a5c32f2a22c6f4880602d392711b88319">const_iterator</link> (<link linkend="_structalbero_1_1node">node</link> *p)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_structalbero_1_1node">node</link> * <link linkend="_classalbero_1_1const__iterator_1a4e12d23778060df0e4f3efa4b848cf66">ptr</link></para>

<para>pointer to the data node in the class structure </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classalbero_1_1const__iterator_1a610b405ee91b485a12c0dee30d9f46bf">albero</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T, typename Comparator&gt;
class albero&lt; T, Comparator &gt;::const_iterator</title></simplesect>

<para>Read only iterator for the albero object. </para>
<simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classalbero_1_1const__iterator_1af751fa567b4c5f205789046bd5ce6bd2"/><section>
    <title>difference_type</title>
<indexterm><primary>difference_type</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput>typedef ptrdiff_t <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::difference_type</computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1a1c8a92a22c10d88bf18b798a247579f1"/><section>
    <title>iterator_category</title>
<indexterm><primary>iterator_category</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput>typedef std::forward_iterator_tag <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::iterator_category</computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1a5b44d31a909319be3bb4638831c22143"/><section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput>typedef const T* <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::pointer</computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1ae363ca6861b7424a5a9200f4e8d1406b"/><section>
    <title>reference</title>
<indexterm><primary>reference</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput>typedef const T&amp; <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::reference</computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classalbero_1_1const__iterator_1affbde34121570516f295d43ce4b5fbda"/><section>
    <title>const_iterator()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::const_iterator ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Construct a new const NULL iterator object. </para>
</para>

<para><note><title>Note</title>

<para>this element does not contain any data </para>
</note>
</para>
<simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1a8cafa0e559d65444f1986cf088135ef3"/><section>
    <title>const_iterator()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::const_iterator (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classalbero_1_1const__iterator_1a04873946aecfaaa57c206ee9a92e10db"/><section>
    <title>~const_iterator()</title>
<indexterm><primary>~const_iterator</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>~const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::~const_iterator ( )<computeroutput>[inline]</computeroutput></computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1a5c32f2a22c6f4880602d392711b88319"/><section>
    <title>const_iterator()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::const_iterator (<link linkend="_structalbero_1_1node">node</link> * p)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classalbero_1_1const__iterator_1a6c6f45aa23158c2492734374fc8f5040"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput>bool <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::operator!= (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1acf95f24ee2dcc80a8bb9676de5c0dfa6"/><section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero_1a472cbd49994891952384d4cc1a8e7c19">value_type</link> <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1af8c76ea3ae936f655433d633bfa23059"/><section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1af43d62370b5a9c97e5a799c7f63f686e"/><section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classalbero_1_1const__iterator_1af6333b3d0d2033e21e871bc8f8b00932"/><section>
    <title>operator-&gt;()</title>
<indexterm><primary>operator-&gt;</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero_1a472cbd49994891952384d4cc1a8e7c19">value_type</link> * <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1ab7f43c8e44e5afc42518b39cf2128cbb"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::operator= (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<anchor xml:id="_classalbero_1_1const__iterator_1a46e8abb6678200d218ba3f2de2b654c5"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput>bool <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::operator== (const <link linkend="_classalbero_1_1const__iterator">const_iterator</link> &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classalbero_1_1const__iterator_1a610b405ee91b485a12c0dee30d9f46bf"/><section>
    <title>albero</title>
<indexterm><primary>albero</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>albero</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput>friend class <link linkend="_classalbero">albero</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classalbero_1_1const__iterator_1a4e12d23778060df0e4f3efa4b848cf66"/><section>
    <title>ptr</title>
<indexterm><primary>ptr</primary><secondary>albero&lt; T, Comparator &gt;::const_iterator</secondary></indexterm>
<indexterm><primary>albero&lt; T, Comparator &gt;::const_iterator</primary><secondary>ptr</secondary></indexterm>
<computeroutput>template&lt;typename T , typename Comparator &gt; </computeroutput><para><computeroutput><link linkend="_structalbero_1_1node">node</link>* <link linkend="_classalbero">albero</link>&lt; T, Comparator &gt;::const_iterator::ptr<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>pointer to the data node in the class structure </para>
</para>
<simplesect><title>Examples</title><link linkend="__2home_2minime_2Documents_2Programmazione_cpp_2tema_240724_2C_09_09_2albero_8h-example">/home/minime/Documents/Programmazione_cpp/tema_240724/C++/albero.h</link>.</simplesect>
</section>
<para>
The documentation for this class was generated from the following file:</para>
/home/minime/Documents/Programmazione_cpp/tema_240724/C++/<link linkend="_albero_8h">albero.h</link></section>
</section>
